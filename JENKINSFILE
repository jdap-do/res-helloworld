pipeline {
    agent none
    environment {
        PYTHONPATH = "${WORKSPACE}"
        BANDIT_PATH = 'C:/Users/joeda/AppData/Local/Programs/Python/Python313/Scripts/bandit.exe'
        FLAKE8_PATH = 'C:/jenkins/tools/python/Scripts/flake8.exe'
        JMETER_PATH = 'C:/jmeter/apache-jmeter-5.6.3/apache-jmeter-5.6.3/bin/jmeter.bat'
    }

    stages {
        stage('Obtener código') {
            agent { label 'master' }
            steps {
                deleteDir()
                git url: 'https://github.com/jdap-do/res-helloworld.git', branch: 'master'
                bat 'dir'
                stash includes: '**', name: 'fuentes'
            }
        }

        stage('Pruebas Unitarias') {
            agent { label 'agent1' }
            steps {
                withEnv(["PYTHONPATH=${WORKSPACE}"]) {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        unstash 'fuentes'
                        bat "pytest --junitxml=result-unit.xml test/unit"
                        stash includes: 'result-unit.xml', name: 'unit'
                    }
                }
            }
        }

        stage('Pruebas de integración (REST)') {
            agent { label 'agent2' }
            steps {
                withEnv(["PYTHONPATH=${WORKSPACE}", "FLASK_APP=app/api.py"]) {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        unstash 'fuentes'

                        bat '''
                            if not exist wiremock\\wiremock-jre8-standalone-2.28.0.jar (
                                echo Wiremock jar no encontrado
                            )
                        '''
                        bat 'start /B flask run'
                        bat 'start /B java -jar wiremock/wiremock-jre8-standalone-2.28.0.jar --port 9090 --root-dir wiremock'
                        bat 'ping 127.0.0.1 -n 30 >nul'
                        bat "pytest --junitxml=result-rest.xml test/rest"
                        stash includes: 'result-rest.xml', name: 'rest'
                    }
                }
            }
        }

        stage('Análisis estático (flake8)') {
            agent { label 'agent1' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'fuentes'
                    bat "${FLAKE8_PATH} app test --exit-zero > flake8.log"
                    recordIssues tools: [flake8(pattern: 'flake8.log')]
                }
            }
        }

        stage('Análisis de seguridad (bandit)') {
            agent { label 'agent1' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'fuentes'
                    bat "${BANDIT_PATH} -r app -f xml -o bandit.xml || exit 0"
                    recordIssues tools: [
                        pyLint(name: 'Bandit', pattern: 'bandit.xml')
                    ], qualityGates: [
                        [threshold: 2, type: 'TOTAL', unstable: true],
                        [threshold: 4, type: 'TOTAL', unstable: false]
                    ]
                }
            }
        }

        stage('Cobertura (coverage)') {
            agent { label 'agent1' }
            steps {
                withEnv(["PYTHONPATH=${WORKSPACE}"]) {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        unstash 'fuentes'
                        bat "pytest --cov=app --cov-report=xml --cov-branch test/unit"
                        archiveArtifacts artifacts: 'coverage.xml', onlyIfSuccessful: true
                        recordCoverage tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']]
                    }
                }
            }
        }

        stage('Pruebas de rendimiento (JMeter)') {
            agent { label 'agent1' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'fuentes'
                    bat "\"${JMETER_PATH}\" -n -t jmeter/testplan_completo.jmx -l jmeter/results.jtl"
                    archiveArtifacts artifacts: 'jmeter/results.jtl', onlyIfSuccessful: true
                    perfReport sourceDataFiles: 'jmeter/results.jtl'
                }
            }
        }

        stage('Resultados') {
            agent { label 'master' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'unit'
                    unstash 'rest'
                    junit 'result-*.xml'
                }
            }
        }
    }
}